(ns movie-recommender.sparkling
  (:gen-class)
  (:require [clojure.string :as str]
            [sparkling.conf :as conf]
            [sparkling.core :as spark]
            [sparkling.destructuring :as s-de]
            [sparkling.scalaInterop :as scala]
            [movie-recommender.data :as data])
  (:import [org.apache.spark.api.java JavaRDD]
           [org.apache.spark.mllib.linalg Vector SparseVector]
           [org.apache.spark.mllib.linalg.distributed RowMatrix]
           [org.apache.spark.mllib.recommendation ALS Rating]))

(defn parse-long [i]
  (Long/parseLong i))

(defn to-mllib-rdd
  "Converts a Java RDD into an mllib RDD."
  [rdd]
  (.rdd rdd))

(defn from-mlib-rdd
  "Converts an mllib RDD into a Java RDD.
  scala/OBJECT-CLASS-TAG is required to interact with the JVM bytecode
  generated by Scala's function definition."
  [rdd]
  (JavaRDD/fromRDD rdd scala/OBJECT-CLASS-TAG))

(defn count-ratings
  "Count the number of ratings."
  [sc]
  (->> (spark/text-file sc "data/ml-100k/ua.base")
       (spark/count)))

(defn parse-rating
  "Given a line from the data, returns a tuple containing the time modulo 10
  (to provide an integer key to split the data on) and a mllib.recommendation
  Rating object."
  [line]
  (let [[user item rating time] (->> (str/split line #"\t")
                                     (map parse-long))]
    (spark/tuple (mod time 10)
                 (Rating. user item rating))))

(defn parse-ratings
  [sc]
  (->> (spark/text-file sc "data/ml-100k/ua.base")
       (spark/map-to-pair parse-rating)))

(defn training-ratings
  "Filter ratings for those with a tuple key value of less than 8 in order
  to build a training set containing ~80% of the data."
  [ratings]
  (->> ratings
       (spark/filter (fn [tuple]
                       (< (s-de/key tuple) 8)))
       (spark/values)))

(defn test-ratings
  "Filter ratings for those with a tuple key value of greater than or equal to
  8 in order to build a training set containing ~80% of the data."
  [ratings]
  (->> ratings
       (spark/filter (s-de/first-value-fn
                       (fn [key] (>= key 8))))
       (spark/values)))

(defn alternating-least-squares
  "Trains alternating least squares on the supplied training data."
  [data {:keys [rank num-iter lambda]}]
  (ALS/train (to-mllib-rdd data) rank num-iter lambda 10))

(defn user-product
  "Returns a tuple of the user id and the product id they rated."
  [rating]
  (spark/tuple (.user rating)
               (.product rating)))

(defn user-product-rating
  "Returns a tuple of the user-product tuple and the actual rating."
  [rating]
  (spark/tuple (user-product rating)
               (.rating rating)))

(defn predict
  "Takes an RDD containing the user ids and item ids and returns predictions.
  .predict will predict the rating for many users and items at once.
  The result is a pair IDD, where key is the user-product tuple and value is
  the predicted rating."
  [model data]
  (->> (spark/map-to-pair user-product data)
       (to-mllib-rdd)
       (.predict model)
       (from-mlib-rdd)
       (spark/map-to-pair user-product-rating)))

(defn squared-error
  [y-hat y]
  "Calculate the square error between predicted and actual."
  (Math/pow (- y-hat y) 2))

(defn sum-squared-errors
  "Calculate the sum of squared errors between predictions and actuals.
  Joins predictions and actuals on a matching user-product tuple
  (these keys will be the same in predictions and actuals)."
  [predictions actuals]
  (->> (spark/join predictions actuals)
       (spark/values)
       (spark/map (s-de/val-val-fn squared-error))
       (spark/reduce +)))

(defn root-mean-square-error
  "Takes a model and some data and calculates the RMSE of the prediction against
  the actual rating. spark/cache is a shorthand function for persisting the RDD
  in memory for recovery since this is the most appropriate level for this application."
  [model data]
  (let [predictions (spark/cache (predict model data))
        actuals     (->> (spark/map-to-pair user-product-rating data)
                         (spark/cache))]
    (-> (sum-squared-errors predictions actuals)
        (/ (spark/count data))
        (Math/sqrt))))